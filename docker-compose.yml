version: '3.8'
services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=production
      - PORT=8000
      - PG_HOST=db
      - PG_PORT=5432
      - PG_DATABASE=postgres
      - PG_USER=postgres
      - PG_PASSWORD=rootroot
      - PG_SSL=false
      - COGNITO_REGION=us-east-1
      - COGNITO_USER_POOL_ID=us-east-1_2b12jp6CP
      - AWS_ASSUME_ROLE_ARN=arn:aws:iam::873912191671:role/Cognito-Backend-Access
      - AWS_ACCESS_KEY_ID=AKIA4W6JZZK33VW62EOE
      - AWS_SECRET_ACCESS_KEY=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
      - COGNITO_APP_CLIENT_ID=220t468rol0v98gjq2hker81l4
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/db/init:/docker-entrypoint-initdb.d   # ‚Üê auto-run on first init
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s

  db:
    image: postgres:17-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=rootroot
      - POSTGRES_DB=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 30s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
